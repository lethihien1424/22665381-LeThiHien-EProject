#!/bin/bash

# GitHub Actions Validation Script
# Ki·ªÉm tra setup GitHub Actions cho d·ª± √°n microservices

echo "üîç Ki·ªÉm tra GitHub Actions Setup..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check if file exists
check_file() {
    if [ -f "$1" ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $1 - File kh√¥ng t·ªìn t·∫°i${NC}"
        return 1
    fi
}

# Function to check directory
check_directory() {
    if [ -d "$1" ]; then
        echo -e "${GREEN}‚úÖ $1/${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $1/ - Directory kh√¥ng t·ªìn t·∫°i${NC}"
        return 1
    fi
}

echo "üìÅ Ki·ªÉm tra c·∫•u tr√∫c files v√† directories:"
echo "----------------------------------------"

# Check GitHub Actions directory and files
check_directory ".github"
check_directory ".github/workflows"
check_file ".github/workflows/ci-cd.yml"
check_file ".github/workflows/security-quality.yml" 
check_file ".github/workflows/release.yml"

# Check Docker files
echo -e "\nüê≥ Ki·ªÉm tra Docker files:"
echo "------------------------"
check_file "Docker-compose.yml"
check_file "docker-compose.staging.yml"
check_file "auth/Dockerfile"
check_file "product/Dockerfile"
check_file "order/Dockerfile"
check_file "api-gateway/Dockerfile"

# Check package.json files
echo -e "\nüì¶ Ki·ªÉm tra package.json files:"
echo "-------------------------------"
check_file "auth/package.json"
check_file "product/package.json"
check_file "order/package.json"
check_file "api-gateway/package.json"

# Check configuration files
echo -e "\n‚öôÔ∏è Ki·ªÉm tra configuration files:"
echo "--------------------------------"
check_file "sonar-project.properties"
check_file "GITHUB_ACTIONS_README.md"

# Validate YAML syntax
echo -e "\nüîß Ki·ªÉm tra YAML syntax:"
echo "------------------------"
if command -v yamllint &> /dev/null; then
    yamllint .github/workflows/*.yml && echo -e "${GREEN}‚úÖ YAML syntax h·ª£p l·ªá${NC}" || echo -e "${RED}‚ùå YAML syntax c√≥ l·ªói${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è yamllint kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t, b·ªè qua ki·ªÉm tra YAML syntax${NC}"
fi

# Check for required secrets (informational)
echo -e "\nüîê GitHub Secrets c·∫ßn thi·∫øt:"
echo "----------------------------"
echo "Docker Hub:"
echo "  - DOCKER_USERNAME"
echo "  - DOCKER_PASSWORD"
echo ""
echo "SSH Servers:"
echo "  - STAGING_HOST"
echo "  - STAGING_USER" 
echo "  - STAGING_SSH_KEY"
echo "  - PRODUCTION_HOST"
echo "  - PRODUCTION_USER"
echo "  - PRODUCTION_SSH_KEY"
echo "  - PRODUCTION_URL"
echo ""
echo "Security & Quality:"
echo "  - SNYK_TOKEN"
echo "  - SONAR_TOKEN"
echo "  - PERSONAL_ACCESS_TOKEN"
echo ""
echo "Notifications:"
echo "  - SLACK_WEBHOOK_URL"

# Check package.json scripts
echo -e "\nüìù Ki·ªÉm tra package.json scripts:"
echo "--------------------------------"
for service in auth product order api-gateway; do
    if [ -f "$service/package.json" ]; then
        echo "üìã $service service:"
        if grep -q '"test"' "$service/package.json"; then
            echo -e "  ${GREEN}‚úÖ test script${NC}"
        else
            echo -e "  ${YELLOW}‚ö†Ô∏è test script kh√¥ng t√¨m th·∫•y${NC}"
        fi
        
        if grep -q '"lint"' "$service/package.json"; then
            echo -e "  ${GREEN}‚úÖ lint script${NC}"
        else
            echo -e "  ${YELLOW}‚ö†Ô∏è lint script kh√¥ng t√¨m th·∫•y${NC}"
        fi
        
        if grep -q '"start"' "$service/package.json"; then
            echo -e "  ${GREEN}‚úÖ start script${NC}"
        else
            echo -e "  ${RED}‚ùå start script kh√¥ng t√¨m th·∫•y${NC}"
        fi
    fi
done

echo -e "\nüéØ Khuy·∫øn ngh·ªã setup:"
echo "--------------------"
echo "1. C√†i ƒë·∫∑t t·∫•t c·∫£ GitHub Secrets c·∫ßn thi·∫øt"
echo "2. T·∫°o staging v√† production environments tr√™n GitHub"
echo "3. Setup SonarCloud project"
echo "4. C·∫•u h√¨nh Snyk integration"
echo "5. Th√™m test scripts v√†o package.json n·∫øu ch∆∞a c√≥"
echo "6. Ki·ªÉm tra Dockerfile c√≥ optimized kh√¥ng"
echo "7. Setup monitoring v√† logging"

echo -e "\n‚úÖ Validation ho√†n th√†nh!"
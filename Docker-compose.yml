services:
  # MongoDB
  mongodb:
    image: mongo:7
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth service
  auth:
    build: 
      context: ./auth
      dockerfile: Dockerfile
    image: eproject-auth:latest
    container_name: auth_service
    env_file:
      - ./auth/.env
    ports:
      - "3000:3000"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Product service
  product:
    build:
      context: ./product
      dockerfile: Dockerfile
    image: eproject-product:latest
    container_name: product_service
    env_file:
      - ./product/.env
    ports:
      - "3001:3001"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Order service
  order:
    build:
      context: ./order
      dockerfile: Dockerfile
    image: eproject-order:latest
    container_name: order_service
    env_file:
      - ./order/.env
    ports:
      - "3002:3002"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # API Gateway service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    image: eproject-api-gateway:latest
    container_name: api_gateway
    ports:
      - "3003:3003"
    depends_on:
      auth:
        condition: service_healthy
      product:
        condition: service_healthy
      order:
        condition: service_healthy
    networks:
      - eproject-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

volumes:
  mongo_data:

networks:
  eproject-network:
    driver: bridge

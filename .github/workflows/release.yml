name: Release & Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  # T·ª± ƒë·ªông t·∫°o release notes v√† tag version hhh
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install semantic-release
      run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git
    
    - name: Generate version and changelog
      id: version
      run: |
        VERSION=$(semantic-release --dry-run | grep 'The next release version is' | sed 's/.*is //')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      if: steps.version.outputs.version != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## What's Changed
          
          Automatically generated release notes for version ${{ steps.version.outputs.version }}
          
          ### Services Updated:
          - Auth Service
          - Product Service  
          - Order Service
          - API Gateway
          
          ### Docker Images:
          - `${{ secrets.DOCKER_USERNAME }}/eproject-auth:v${{ steps.version.outputs.version }}`
          - `${{ secrets.DOCKER_USERNAME }}/eproject-product:v${{ steps.version.outputs.version }}`
          - `${{ secrets.DOCKER_USERNAME }}/eproject-order:v${{ steps.version.outputs.version }}`
          - `${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:v${{ steps.version.outputs.version }}`
        draft: false
        prerelease: false

  # Build v√† push Docker images v·ªõi version tag
  build-release:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.version != ''
    
    strategy:
      matrix:
        service: [auth, product, order, api-gateway]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push versioned image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:v${{ needs.release.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy production v·ªõi version m·ªõi
  deploy-production-release:
    name: Deploy Production Release
    runs-on: ubuntu-latest
    needs: [release, build-release]
    if: needs.release.outputs.version != ''
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /path/to/production/eproject
          
          # Backup current version
          docker-compose down
          docker tag eproject-auth:latest eproject-auth:backup
          docker tag eproject-product:latest eproject-product:backup
          docker tag eproject-order:latest eproject-order:backup
          docker tag eproject-api-gateway:latest eproject-api-gateway:backup
          
          # Pull new version
          export VERSION=v${{ needs.release.outputs.version }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/eproject-auth:$VERSION
          docker pull ${{ secrets.DOCKER_USERNAME }}/eproject-product:$VERSION
          docker pull ${{ secrets.DOCKER_USERNAME }}/eproject-order:$VERSION
          docker pull ${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:$VERSION
          
          # Tag as latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/eproject-auth:$VERSION eproject-auth:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/eproject-product:$VERSION eproject-product:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/eproject-order:$VERSION eproject-order:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:$VERSION eproject-api-gateway:latest
          
          # Start services
          docker-compose up -d
          
          # Health check
          sleep 30
          curl -f http://localhost:3000/health || exit 1
          
          # Clean up old images
          docker system prune -f
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: |
          üöÄ Production deployment successful!
          Version: v${{ needs.release.outputs.version }}
          All services are running healthy.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: |
          ‚ùå Production deployment failed!
          Version: v${{ needs.release.outputs.version }}
          Please check the logs and rollback if necessary.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
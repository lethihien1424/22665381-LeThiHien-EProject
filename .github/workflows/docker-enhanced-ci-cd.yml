name: Enhanced Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: docker.io
  NODE_VERSION: '18'

jobs:
  # Job detect changes để chỉ build services có thay đổi
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      auth: ${{ steps.changes.outputs.auth }}
      product: ${{ steps.changes.outputs.product }}
      order: ${{ steps.changes.outputs.order }}
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          auth:
            - 'auth/**'
          product:
            - 'product/**'
          order:
            - 'order/**'
          api-gateway:
            - 'api-gateway/**'
          infrastructure:
            - 'Docker-compose.yml'
            - 'docker-compose.*.yml'
            - '.github/workflows/**'

  # Job test với Docker containers
  test-with-docker:
    name: Test with Docker
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.auth == 'true' ||
      needs.detect-changes.outputs.product == 'true' ||
      needs.detect-changes.outputs.order == 'true' ||
      needs.detect-changes.outputs.api-gateway == 'true'
    
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3.13-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        service: [auth, product, order, api-gateway]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check if service changed
      id: check-changes
      run: |
        if [ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Node.js
      if: steps.check-changes.outputs.changed == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ matrix.service }}/package-lock.json'
    
    - name: Install dependencies
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        cd ${{ matrix.service }}
        npm ci
    
    - name: Run unit tests
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        cd ${{ matrix.service }}
        npm test || echo "No test script found"
    
    - name: Build Docker image for testing
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        cd ${{ matrix.service }}
        docker build -t eproject-${{ matrix.service }}:test .
    
    - name: Run integration tests in Docker
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        docker run --rm --network host \
          -e MONGO_URI=mongodb://testuser:testpass@localhost:27017/test?authSource=admin \
          -e RABBITMQ_URL=amqp://guest:guest@localhost:5672 \
          eproject-${{ matrix.service }}:test npm test

  # Job build và push Docker images với multi-platform support
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [detect-changes, test-with-docker]
    if: |
      github.event_name == 'push' && (
        needs.detect-changes.outputs.auth == 'true' ||
        needs.detect-changes.outputs.product == 'true' ||
        needs.detect-changes.outputs.order == 'true' ||
        needs.detect-changes.outputs.api-gateway == 'true'
      )
    
    strategy:
      matrix:
        service: [auth, product, order, api-gateway]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check if service changed
      id: check-changes
      run: |
        if [ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up QEMU
      if: steps.check-changes.outputs.changed == 'true'
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      if: steps.check-changes.outputs.changed == 'true'
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
    
    - name: Login to Docker Hub
      if: steps.check-changes.outputs.changed == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      if: steps.check-changes.outputs.changed == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-,format=short
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.title=EProject ${{ matrix.service }} Service
          org.opencontainers.image.description=Microservice for ${{ matrix.service }} functionality
          org.opencontainers.image.vendor=EProject Team
    
    - name: Build and push Docker image
      if: steps.check-changes.outputs.changed == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.service }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service }}
        build-args: |
          NODE_VERSION=${{ env.NODE_VERSION }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

  # Job security scan cho Docker images
  security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    if: |
      needs.detect-changes.outputs.auth == 'true' ||
      needs.detect-changes.outputs.product == 'true' ||
      needs.detect-changes.outputs.order == 'true' ||
      needs.detect-changes.outputs.api-gateway == 'true'
    
    strategy:
      matrix:
        service: [auth, product, order, api-gateway]
    
    steps:
    - name: Check if service changed
      id: check-changes
      run: |
        if [ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Run Trivy vulnerability scanner
      if: steps.check-changes.outputs.changed == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      if: steps.check-changes.outputs.changed == 'true'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Job deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup environment variables
      run: |
        echo "VERSION=${{ github.sha }}" >> $GITHUB_ENV
        echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        envs: VERSION,DOCKER_USERNAME
        script: |
          cd /opt/eproject-staging
          
          # Backup current deployment
          docker-compose -f docker-compose.staging.yml down
          
          # Pull latest images
          export VERSION=$VERSION
          export DOCKER_USERNAME=$DOCKER_USERNAME
          docker-compose -f docker-compose.staging.yml pull
          
          # Start services
          docker-compose -f docker-compose.staging.yml up -d
          
          # Wait for services to be healthy
          sleep 30
          
          # Health check
          docker-compose -f docker-compose.staging.yml ps
          
          # Clean up old images
          docker image prune -f
    
    - name: Run smoke tests
      run: |
        sleep 60
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1

  # Job deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup environment variables
      run: |
        echo "VERSION=${{ github.sha }}" >> $GITHUB_ENV
        echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        envs: VERSION,DOCKER_USERNAME
        script: |
          cd /opt/eproject-production
          
          # Create backup
          docker-compose -f docker-compose.prod.yml down
          
          # Pull latest images
          export VERSION=$VERSION
          export DOCKER_USERNAME=$DOCKER_USERNAME
          docker-compose -f docker-compose.prod.yml pull
          
          # Rolling update strategy
          docker-compose -f docker-compose.prod.yml up -d --no-deps api-gateway
          sleep 10
          docker-compose -f docker-compose.prod.yml up -d --no-deps auth product order
          
          # Wait for services to be healthy
          sleep 60
          
          # Health check
          docker-compose -f docker-compose.prod.yml ps
          
          # Clean up
          docker image prune -f
    
    - name: Run production health checks
      run: |
        sleep 60
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_URL }}/api/auth/health || exit 1
        curl -f ${{ secrets.PRODUCTION_URL }}/api/products/health || exit 1
        curl -f ${{ secrets.PRODUCTION_URL }}/api/orders/health || exit 1
    
    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Production deployment successful! :rocket:'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Production deployment failed! :x:'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}